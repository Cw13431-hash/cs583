{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Programming Assignment: Numerical Optimization for Logistic Regression.\n",
    "\n",
    "### Name: [Your-Name?]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0. You will do the following:\n",
    "\n",
    "1. Read the lecture note: [click here](https://github.com/wangshusen/DeepLearning/blob/master/LectureNotes/Logistic/paper/logistic.pdf)\n",
    "\n",
    "2. Read, complete, and run my code.\n",
    "\n",
    "3. **Implement mini-batch SGD** and evaluate the performance.\n",
    "\n",
    "4. Convert the .IPYNB file to .HTML file.\n",
    "\n",
    "    * The HTML file must contain **the code** and **the output after execution**.\n",
    "    \n",
    "    * Missing **the output after execution** will not be graded.\n",
    "    \n",
    "    \n",
    "5. Upload this .HTML file to your Google Drive, Dropbox, or your Github repo.  (If you submit the file to Google Drive or Dropbox, you must make the file \"open-access\". The delay caused by \"deny of access\" may result in late penalty.)\n",
    "\n",
    "6. On Canvas, submit the Google Drive/Dropbox/Github link to the HTML file.\n",
    "\n",
    "\n",
    "## Grading criteria:\n",
    "\n",
    "1. When computing the ```gradient``` and ```objective function value``` using a batch of samples, use **matrix-vector multiplication** rather than a FOR LOOP of **vector-vector multiplications**.\n",
    "\n",
    "2. Plot ```objective function value``` against ```epochs```. In the plot, compare GD, SGD, and MB-SGD (with $b=8$ and $b=64$). The plot must look reasonable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Data processing\n",
    "\n",
    "- Download the Diabete dataset from https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/diabetes\n",
    "- Load the data using sklearn.\n",
    "- Preprocess the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1. Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x: (768, 8)\n",
      "Shape of y: (768,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn import datasets\n",
    "import numpy\n",
    "\n",
    "x_sparse, y = datasets.load_svmlight_file('diabetes')\n",
    "x = x_sparse.todense()\n",
    "\n",
    "print('Shape of x: ' + str(x.shape))\n",
    "print('Shape of y: ' + str(y.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2. Partition to training and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x_train: (640, 8)\n",
      "Shape of x_test: (128, 8)\n",
      "Shape of y_train: (640, 1)\n",
      "Shape of y_test: (128, 1)\n"
     ]
    }
   ],
   "source": [
    "# partition the data to training and test sets\n",
    "n = x.shape[0]\n",
    "n_train = 640\n",
    "n_test = n - n_train\n",
    "\n",
    "rand_indices = numpy.random.permutation(n)\n",
    "train_indices = rand_indices[0:n_train]\n",
    "test_indices = rand_indices[n_train:n]\n",
    "\n",
    "x_train = x[train_indices, :]\n",
    "x_test = x[test_indices, :]\n",
    "y_train = y[train_indices].reshape(n_train, 1)\n",
    "y_test = y[test_indices].reshape(n_test, 1)\n",
    "\n",
    "print('Shape of x_train: ' + str(x_train.shape))\n",
    "print('Shape of x_test: ' + str(x_test.shape))\n",
    "print('Shape of y_train: ' + str(y_train.shape))\n",
    "print('Shape of y_test: ' + str(y_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.3. Feature scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the standardization to trainsform both training and test features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test mean = \n",
      "[[-0.08626237  0.11180713 -0.09904696 -0.0504779   0.13585227  0.00509769\n",
      "  -0.08777408  0.02086581]]\n",
      "test std = \n",
      "[[0.96115499 1.21481799 1.02113204 0.93988165 1.23095015 0.90550529\n",
      "  0.92332913 0.99772335]]\n"
     ]
    }
   ],
   "source": [
    "# Standardization\n",
    "import numpy\n",
    "\n",
    "# calculate mu and sig using the training set\n",
    "d = x_train.shape[1]\n",
    "mu = numpy.mean(x_train, axis=0).reshape(1, d)\n",
    "sig = numpy.std(x_train, axis=0).reshape(1, d)\n",
    "\n",
    "# transform the training features\n",
    "x_train = (x_train - mu) / (sig + 1E-6)\n",
    "\n",
    "# transform the test features\n",
    "x_test = (x_test - mu) / (sig + 1E-6)\n",
    "\n",
    "print('test mean = ')\n",
    "print(numpy.mean(x_test, axis=0))\n",
    "\n",
    "print('test std = ')\n",
    "print(numpy.std(x_test, axis=0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.4. Add a dimension of all ones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x_train: (640, 9)\n",
      "Shape of x_test: (128, 9)\n"
     ]
    }
   ],
   "source": [
    "n_train, d = x_train.shape\n",
    "x_train = numpy.concatenate((x_train, numpy.ones((n_train, 1))), axis=1)\n",
    "\n",
    "n_test, d = x_test.shape\n",
    "x_test = numpy.concatenate((x_test, numpy.ones((n_test, 1))), axis=1)\n",
    "\n",
    "print('Shape of x_train: ' + str(x_train.shape))\n",
    "print('Shape of x_test: ' + str(x_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Logistic regression model\n",
    "\n",
    "The objective function is $Q (w; X, y) = \\frac{1}{n} \\sum_{i=1}^n \\log \\Big( 1 + \\exp \\big( - y_i x_i^T w \\big) \\Big) + \\frac{\\lambda}{2} \\| w \\|_2^2 $."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the objective function value\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "# Return:\n",
    "#     objective function value (scalar)\n",
    "def objective(w, x, y, lam):\n",
    "    n, d = x.shape\n",
    "    yx = numpy.multiply(y, x) # n-by-d matrix\n",
    "    yxw = numpy.dot(yx, w) # n-by-1 matrix\n",
    "    vec1 = numpy.exp(-yxw) # n-by-1 matrix\n",
    "    vec2 = numpy.log(1 + vec1) # n-by-1 matrix\n",
    "    loss = numpy.mean(vec2) # scalar\n",
    "    reg = lam / 2 * numpy.sum(w * w) # scalar\n",
    "    return loss + reg\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial objective function value = 0.6931471805599453\n"
     ]
    }
   ],
   "source": [
    "# initialize w\n",
    "d = x_train.shape[1]\n",
    "w = numpy.zeros((d, 1))\n",
    "\n",
    "# evaluate the objective function value at w\n",
    "lam = 1E-6\n",
    "objval0 = objective(w, x_train, y_train, lam)\n",
    "print('Initial objective function value = ' + str(objval0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Numerical optimization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1. Gradient descent\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The gradient at $w$ is $g = - \\frac{1}{n} \\sum_{i=1}^n \\frac{y_i x_i }{1 + \\exp ( y_i x_i^T w)} + \\lambda w$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the gradient\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "# Return:\n",
    "#     g: g: d-by-1 matrix, full gradient\n",
    "def gradient(w, x, y, lam):\n",
    "    n, d = x.shape\n",
    "    yx = numpy.multiply(y, x) # n-by-d matrix\n",
    "    yxw = numpy.dot(yx, w) # n-by-1 matrix\n",
    "    vec1 = numpy.exp(yxw) # n-by-1 matrix\n",
    "    vec2 = numpy.divide(yx, 1+vec1) # n-by-d matrix\n",
    "    vec3 = -numpy.mean(vec2, axis=0).reshape(d, 1) # d-by-1 matrix\n",
    "    g = vec3 + lam * w\n",
    "    return g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Gradient descent for solving logistic regression\n",
    "# Inputs:\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "#     stepsize: scalar\n",
    "#     max_iter: integer, the maximal iterations\n",
    "#     w: d-by-1 matrix, initialization of w\n",
    "# Return:\n",
    "#     w: d-by-1 matrix, the solution\n",
    "#     objvals: a record of each iteration's objective value\n",
    "def grad_descent(x, y, lam, stepsize, max_iter=100, w=None):\n",
    "    n, d = x.shape\n",
    "    objvals = numpy.zeros(max_iter) # store the objective values\n",
    "    if w is None:\n",
    "        w = numpy.zeros((d, 1)) # zero initialization\n",
    "    \n",
    "    for t in range(max_iter):\n",
    "        objval = objective(w, x, y, lam)\n",
    "        objvals[t] = objval\n",
    "        print('Objective value at t=' + str(t) + ' is ' + str(objval))\n",
    "        g = gradient(w, x, y, lam)\n",
    "        w -= stepsize * g\n",
    "    \n",
    "    return w, objvals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run gradient descent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Objective value at t=0 is 0.6931471805599453\n",
      "Objective value at t=1 is 0.5920605462227183\n",
      "Objective value at t=2 is 0.5497601438601758\n",
      "Objective value at t=3 is 0.5267309350736253\n",
      "Objective value at t=4 is 0.5123184018590918\n",
      "Objective value at t=5 is 0.5025876697756427\n",
      "Objective value at t=6 is 0.4957047983069293\n",
      "Objective value at t=7 is 0.4906794127925502\n",
      "Objective value at t=8 is 0.4869232944411249\n",
      "Objective value at t=9 is 0.48406399759282476\n",
      "Objective value at t=10 is 0.48185477427070483\n",
      "Objective value at t=11 is 0.4801265206168413\n",
      "Objective value at t=12 is 0.4787602159648405\n",
      "Objective value at t=13 is 0.4776702419842915\n",
      "Objective value at t=14 is 0.47679386403214574\n",
      "Objective value at t=15 is 0.4760843798471456\n",
      "Objective value at t=16 is 0.47550653701830703\n",
      "Objective value at t=17 is 0.4750333984641343\n",
      "Objective value at t=18 is 0.4746441563129119\n",
      "Objective value at t=19 is 0.47432258083879636\n",
      "Objective value at t=20 is 0.4740559029357182\n",
      "Objective value at t=21 is 0.4738339976970953\n",
      "Objective value at t=22 is 0.4736487803981221\n",
      "Objective value at t=23 is 0.47349375444480934\n",
      "Objective value at t=24 is 0.47336366947055925\n",
      "Objective value at t=25 is 0.473254260229273\n",
      "Objective value at t=26 is 0.47316204541319035\n",
      "Objective value at t=27 is 0.47308417137192654\n",
      "Objective value at t=28 is 0.47301828979588084\n",
      "Objective value at t=29 is 0.4729624613179025\n",
      "Objective value at t=30 is 0.4729150790552738\n",
      "Objective value at t=31 is 0.4728748076095834\n",
      "Objective value at t=32 is 0.47284053413441557\n",
      "Objective value at t=33 is 0.47281132888617683\n",
      "Objective value at t=34 is 0.47278641327251814\n",
      "Objective value at t=35 is 0.4727651338622366\n",
      "Objective value at t=36 is 0.47274694116034316\n",
      "Objective value at t=37 is 0.4727313722108018\n",
      "Objective value at t=38 is 0.4727180362879939\n",
      "Objective value at t=39 is 0.47270660309125423\n",
      "Objective value at t=40 is 0.47269679297594636\n",
      "Objective value at t=41 is 0.47268836884764404\n",
      "Objective value at t=42 is 0.4726811294191576\n",
      "Objective value at t=43 is 0.4726749035879576\n",
      "Objective value at t=44 is 0.4726695457374554\n",
      "Objective value at t=45 is 0.4726649318022169\n",
      "Objective value at t=46 is 0.472660955966536\n",
      "Objective value at t=47 is 0.4726575278893987\n",
      "Objective value at t=48 is 0.4726545703679452\n",
      "Objective value at t=49 is 0.4726520173670024\n",
      "Objective value at t=50 is 0.472649812354835\n",
      "Objective value at t=51 is 0.472647906895543\n",
      "Objective value at t=52 is 0.47264625945693634\n",
      "Objective value at t=53 is 0.47264483439962895\n",
      "Objective value at t=54 is 0.47264360111878034\n",
      "Objective value at t=55 is 0.4726425333146094\n",
      "Objective value at t=56 is 0.47264160837169505\n",
      "Objective value at t=57 is 0.47264080683029724\n",
      "Objective value at t=58 is 0.4726401119356206\n",
      "Objective value at t=59 is 0.47263950925317144\n",
      "Objective value at t=60 is 0.47263898634022455\n",
      "Objective value at t=61 is 0.47263853246497567\n",
      "Objective value at t=62 is 0.4726381383662658\n",
      "Objective value at t=63 is 0.4726377960478511\n",
      "Objective value at t=64 is 0.4726374986021223\n",
      "Objective value at t=65 is 0.47263724005894736\n",
      "Objective value at t=66 is 0.4726370152559681\n",
      "Objective value at t=67 is 0.4726368197272274\n",
      "Objective value at t=68 is 0.4726366496074794\n",
      "Objective value at t=69 is 0.4726365015499173\n",
      "Objective value at t=70 is 0.47263637265539843\n",
      "Objective value at t=71 is 0.47263626041152174\n",
      "Objective value at t=72 is 0.4726361626401569\n",
      "Objective value at t=73 is 0.47263607745222763\n",
      "Objective value at t=74 is 0.4726360032087255\n",
      "Objective value at t=75 is 0.47263593848707675\n",
      "Objective value at t=76 is 0.47263588205211415\n",
      "Objective value at t=77 is 0.4726358328310103\n",
      "Objective value at t=78 is 0.4726357898916211\n",
      "Objective value at t=79 is 0.47263575242376604\n",
      "Objective value at t=80 is 0.4726357197230418\n",
      "Objective value at t=81 is 0.4726356911768175\n",
      "Objective value at t=82 is 0.47263566625211384\n",
      "Objective value at t=83 is 0.47263564448510864\n",
      "Objective value at t=84 is 0.4726356254720449\n",
      "Objective value at t=85 is 0.4726356088613522\n",
      "Objective value at t=86 is 0.47263559434681784\n",
      "Objective value at t=87 is 0.4726355816616622\n",
      "Objective value at t=88 is 0.4726355705734008\n",
      "Objective value at t=89 is 0.472635560879383\n",
      "Objective value at t=90 is 0.4726355524029216\n",
      "Objective value at t=91 is 0.4726355449899271\n",
      "Objective value at t=92 is 0.4726355385059881\n",
      "Objective value at t=93 is 0.47263553283383086\n",
      "Objective value at t=94 is 0.4726355278711114\n",
      "Objective value at t=95 is 0.4726355235284964\n",
      "Objective value at t=96 is 0.4726355197279924\n",
      "Objective value at t=97 is 0.47263551640149254\n",
      "Objective value at t=98 is 0.4726355134895124\n",
      "Objective value at t=99 is 0.47263551094008743\n"
     ]
    }
   ],
   "source": [
    "lam = 1E-6\n",
    "stepsize = 1.0\n",
    "w, objvals_gd = grad_descent(x_train, y_train, lam, stepsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2. Stochastic gradient descent (SGD)\n",
    "\n",
    "Define $Q_i (w) = \\log \\Big( 1 + \\exp \\big( - y_i x_i^T w \\big) \\Big) + \\frac{\\lambda}{2} \\| w \\|_2^2 $.\n",
    "\n",
    "The stochastic gradient at $w$ is $g_i = \\frac{\\partial Q_i }{ \\partial w} = -\\frac{y_i x_i }{1 + \\exp ( y_i x_i^T w)} + \\lambda w$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the objective Q_i and the gradient of Q_i\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     xi: 1-by-d matrix\n",
    "#     yi: scalar\n",
    "#     lam: scalar, the regularization parameter\n",
    "# Return:\n",
    "#     obj: scalar, the objective Q_i\n",
    "#     g: d-by-1 matrix, gradient of Q_i\n",
    "def stochastic_objective_gradient(w, xi, yi, lam):\n",
    "    yx = yi * xi # 1-by-d matrix\n",
    "    yxw = float(numpy.dot(yx, w)) # scalar\n",
    "    \n",
    "    # calculate objective function Q_i\n",
    "    loss = numpy.log(1 + numpy.exp(-yxw)) # scalar\n",
    "    reg = lam / 2 * numpy.sum(w * w) # scalar\n",
    "    obj = loss + reg\n",
    "    \n",
    "    # calculate stochastic gradient\n",
    "    g_loss = -yx.T / (1 + numpy.exp(yxw)) # d-by-1 matrix\n",
    "    g = g_loss + lam * w # d-by-1 matrix\n",
    "    \n",
    "    return obj, g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# SGD for solving logistic regression\n",
    "# Inputs:\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "#     stepsize: scalar\n",
    "#     max_epoch: integer, the maximal epochs\n",
    "#     w: d-by-1 matrix, initialization of w\n",
    "# Return:\n",
    "#     w: the solution\n",
    "#     objvals: record of each iteration's objective value\n",
    "def sgd(x, y, lam, stepsize, max_epoch=100, w=None):\n",
    "    n, d = x.shape\n",
    "    objvals = numpy.zeros(max_epoch) # store the objective values\n",
    "    if w is None:\n",
    "        w = numpy.zeros((d, 1)) # zero initialization\n",
    "    \n",
    "    for t in range(max_epoch):\n",
    "        # randomly shuffle the samples\n",
    "        rand_indices = numpy.random.permutation(n)\n",
    "        x_rand = x[rand_indices, :]\n",
    "        y_rand = y[rand_indices, :]\n",
    "        \n",
    "        objval = 0 # accumulate the objective values\n",
    "        for i in range(n):\n",
    "            xi = x_rand[i, :] # 1-by-d matrix\n",
    "            yi = float(y_rand[i, :]) # scalar\n",
    "            obj, g = stochastic_objective_gradient(w, xi, yi, lam)\n",
    "            objval += obj\n",
    "            w -= stepsize * g\n",
    "        \n",
    "        stepsize *= 0.9 # decrease step size\n",
    "        objval /= n\n",
    "        objvals[t] = objval\n",
    "        print('Objective value at epoch t=' + str(t) + ' is ' + str(objval))\n",
    "    \n",
    "    return w, objvals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run SGD."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jt/cbpw7x2n7kvfyc4wbk0dvvlc0000gn/T/ipykernel_51750/2481626160.py:27: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
      "  yi = float(y_rand[i, :]) # scalar\n",
      "/var/folders/jt/cbpw7x2n7kvfyc4wbk0dvvlc0000gn/T/ipykernel_51750/4188564408.py:12: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
      "  yxw = float(numpy.dot(yx, w)) # scalar\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Objective value at epoch t=0 is 0.5089426043333295\n",
      "Objective value at epoch t=1 is 0.5212493624553536\n",
      "Objective value at epoch t=2 is 0.515817489937277\n",
      "Objective value at epoch t=3 is 0.501754680954032\n",
      "Objective value at epoch t=4 is 0.5101930736579049\n",
      "Objective value at epoch t=5 is 0.500124950832189\n",
      "Objective value at epoch t=6 is 0.5028319064419856\n",
      "Objective value at epoch t=7 is 0.5002257826941298\n",
      "Objective value at epoch t=8 is 0.4930281256565154\n",
      "Objective value at epoch t=9 is 0.4907597018830695\n",
      "Objective value at epoch t=10 is 0.4914987406217607\n",
      "Objective value at epoch t=11 is 0.49143688290587495\n",
      "Objective value at epoch t=12 is 0.49023583683375527\n",
      "Objective value at epoch t=13 is 0.48565989789206326\n",
      "Objective value at epoch t=14 is 0.4875707008152905\n",
      "Objective value at epoch t=15 is 0.48497974500786356\n",
      "Objective value at epoch t=16 is 0.48314971886994984\n",
      "Objective value at epoch t=17 is 0.48101301508336664\n",
      "Objective value at epoch t=18 is 0.4821797462148588\n",
      "Objective value at epoch t=19 is 0.48003655788079236\n",
      "Objective value at epoch t=20 is 0.47954574539320916\n",
      "Objective value at epoch t=21 is 0.4794219750858189\n",
      "Objective value at epoch t=22 is 0.4797723853817466\n",
      "Objective value at epoch t=23 is 0.4778329644339762\n",
      "Objective value at epoch t=24 is 0.4780370928706167\n",
      "Objective value at epoch t=25 is 0.47719984663729453\n",
      "Objective value at epoch t=26 is 0.4770557322948249\n",
      "Objective value at epoch t=27 is 0.4763825351310125\n",
      "Objective value at epoch t=28 is 0.4759800908819704\n",
      "Objective value at epoch t=29 is 0.4760221671464767\n",
      "Objective value at epoch t=30 is 0.4755046560627723\n",
      "Objective value at epoch t=31 is 0.47531661253796276\n",
      "Objective value at epoch t=32 is 0.47495157595322207\n",
      "Objective value at epoch t=33 is 0.474810721772226\n",
      "Objective value at epoch t=34 is 0.4745678543542769\n",
      "Objective value at epoch t=35 is 0.4743667712470175\n",
      "Objective value at epoch t=36 is 0.47420586414830074\n",
      "Objective value at epoch t=37 is 0.47401859716417805\n",
      "Objective value at epoch t=38 is 0.4739078117622616\n",
      "Objective value at epoch t=39 is 0.4737809870226223\n",
      "Objective value at epoch t=40 is 0.4736738818981586\n",
      "Objective value at epoch t=41 is 0.4735641083055511\n",
      "Objective value at epoch t=42 is 0.4734701396467692\n",
      "Objective value at epoch t=43 is 0.473383652669796\n",
      "Objective value at epoch t=44 is 0.47331378391067025\n",
      "Objective value at epoch t=45 is 0.47325207297813227\n",
      "Objective value at epoch t=46 is 0.4731886528553332\n",
      "Objective value at epoch t=47 is 0.4731386007400327\n",
      "Objective value at epoch t=48 is 0.4730823947730559\n",
      "Objective value at epoch t=49 is 0.4730408038462849\n",
      "Objective value at epoch t=50 is 0.4730014910083874\n",
      "Objective value at epoch t=51 is 0.47296622007259453\n",
      "Objective value at epoch t=52 is 0.47293297478259194\n",
      "Objective value at epoch t=53 is 0.4729009559766353\n",
      "Objective value at epoch t=54 is 0.4728759069267373\n",
      "Objective value at epoch t=55 is 0.4728519689876903\n",
      "Objective value at epoch t=56 is 0.4728310179765642\n",
      "Objective value at epoch t=57 is 0.47281135469228214\n",
      "Objective value at epoch t=58 is 0.4727938764071956\n",
      "Objective value at epoch t=59 is 0.47277820929970427\n",
      "Objective value at epoch t=60 is 0.4727636335268546\n",
      "Objective value at epoch t=61 is 0.4727512525896265\n",
      "Objective value at epoch t=62 is 0.472739538371274\n",
      "Objective value at epoch t=63 is 0.47272929751709014\n",
      "Objective value at epoch t=64 is 0.47271993849611427\n",
      "Objective value at epoch t=65 is 0.47271152709718195\n",
      "Objective value at epoch t=66 is 0.4727038665190991\n",
      "Objective value at epoch t=67 is 0.47269700224482525\n",
      "Objective value at epoch t=68 is 0.47269090723811286\n",
      "Objective value at epoch t=69 is 0.4726854270634715\n",
      "Objective value at epoch t=70 is 0.4726804696065285\n",
      "Objective value at epoch t=71 is 0.4726759660797303\n",
      "Objective value at epoch t=72 is 0.47267188892762313\n",
      "Objective value at epoch t=73 is 0.47266832902987393\n",
      "Objective value at epoch t=74 is 0.47266504562064793\n",
      "Objective value at epoch t=75 is 0.4726621217038717\n",
      "Objective value at epoch t=76 is 0.4726594813780567\n",
      "Objective value at epoch t=77 is 0.4726570999000527\n",
      "Objective value at epoch t=78 is 0.47265495937104574\n",
      "Objective value at epoch t=79 is 0.4726530305994349\n",
      "Objective value at epoch t=80 is 0.47265129371860404\n",
      "Objective value at epoch t=81 is 0.47264973058001464\n",
      "Objective value at epoch t=82 is 0.47264832032745446\n",
      "Objective value at epoch t=83 is 0.4726470612323407\n",
      "Objective value at epoch t=84 is 0.4726459219497796\n",
      "Objective value at epoch t=85 is 0.47264489473120397\n",
      "Objective value at epoch t=86 is 0.4726439738283901\n",
      "Objective value at epoch t=87 is 0.4726431432718178\n",
      "Objective value at epoch t=88 is 0.4726423968663635\n",
      "Objective value at epoch t=89 is 0.47264172441692887\n",
      "Objective value at epoch t=90 is 0.47264111885160764\n",
      "Objective value at epoch t=91 is 0.47264057355157335\n",
      "Objective value at epoch t=92 is 0.4726400837253699\n",
      "Objective value at epoch t=93 is 0.472639641622736\n",
      "Objective value at epoch t=94 is 0.4726392450262483\n",
      "Objective value at epoch t=95 is 0.4726388877251512\n",
      "Objective value at epoch t=96 is 0.47263856590358594\n",
      "Objective value at epoch t=97 is 0.47263827637638967\n",
      "Objective value at epoch t=98 is 0.4726380156693941\n",
      "Objective value at epoch t=99 is 0.4726377810631305\n"
     ]
    }
   ],
   "source": [
    "lam = 1E-6\n",
    "stepsize = 0.1\n",
    "w, objvals_sgd = sgd(x_train, y_train, lam, stepsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Compare GD with SGD\n",
    "\n",
    "Plot objective function values against epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "fig = plt.figure(figsize=(6, 4))\n",
    "\n",
    "epochs_gd = range(len(objvals_gd))\n",
    "epochs_sgd = range(len(objvals_sgd))\n",
    "\n",
    "line0, = plt.plot(epochs_gd, objvals_gd, '--b')\n",
    "line1, = plt.plot(epochs_sgd, objvals_sgd, '-r')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Objective Value')\n",
    "plt.xticks()\n",
    "plt.yticks()\n",
    "plt.legend([line0, line1], ['GD', 'SGD'])\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "fig.savefig('compare_gd_sgd.pdf', format='pdf', dpi=1200)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict class label\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     X: m-by-d matrix\n",
    "# Return:\n",
    "#     f: m-by-1 matrix, the predictions\n",
    "def predict(w, X):\n",
    "    xw = numpy.dot(X, w)\n",
    "    f = numpy.sign(xw)\n",
    "    return f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training classification error is 0.371875\n"
     ]
    }
   ],
   "source": [
    "# evaluate training error\n",
    "f_train = predict(w, x_train)\n",
    "diff = numpy.abs(f_train - y_train) / 2\n",
    "error_train = numpy.mean(diff)\n",
    "print('Training classification error is ' + str(error_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test classification error is 0.25\n"
     ]
    }
   ],
   "source": [
    "# evaluate test error\n",
    "f_test = predict(w, x_test)\n",
    "diff = numpy.abs(f_test - y_test) / 2\n",
    "error_test = numpy.mean(diff)\n",
    "print('Test classification error is ' + str(error_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6. Mini-batch SGD (fill the code)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6.1. Compute the objective $Q_I$ and its gradient using a batch of samples\n",
    "\n",
    "Define $Q_I (w) = \\frac{1}{b} \\sum_{i \\in I} \\log \\Big( 1 + \\exp \\big( - y_i x_i^T w \\big) \\Big) + \\frac{\\lambda}{2} \\| w \\|_2^2 $, where $I$ is a set containing $b$ indices randomly drawn from $\\{ 1, \\cdots , n \\}$ without replacement.\n",
    "\n",
    "The stochastic gradient at $w$ is $g_I = \\frac{\\partial Q_I }{ \\partial w} = \\frac{1}{b} \\sum_{i \\in I} \\frac{- y_i x_i }{1 + \\exp ( y_i x_i^T w)} + \\lambda w$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the objective Q_I and the gradient of Q_I\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     xi: b-by-d matrix\n",
    "#     yi: b-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "#     b: integer, the batch size\n",
    "# Return:\n",
    "#     obj: scalar, the objective Q_i\n",
    "#     g: d-by-1 matrix, gradient of Q_i\n",
    "def mb_stochastic_objective_gradient(w, xi, yi, lam, b):\n",
    "    # Fill the function\n",
    "    # Follow the implementation of stochastic_objective_gradient\n",
    "    # Use matrix-vector multiplication; do not use FOR LOOP of vector-vector multiplications\n",
    "    n, d = xi.shape\n",
    "    yx = numpy.multiply(yi, xi) # n-by-d matrix\n",
    "    yxw = numpy.dot(yx, w) # n-by-1 matrix\n",
    "    vec1 = numpy.exp(-yxw) # n-by-1 matrix\n",
    "    vec2 = numpy.log(1 + vec1) # n-by-1 matrix\n",
    "    loss = numpy.sum(vec2) / b # scalar\n",
    "    reg = ( lam / 2 ) * numpy.sum(w * w) # scalar\n",
    "    obj = loss + reg\n",
    "\n",
    "    g_loss = numpy.sum(-yx / (1 + numpy.exp(yxw)))\n",
    "    g_reg = lam * w\n",
    "    g = g_loss / b + g_reg\n",
    "\n",
    "    return obj, g\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6.2. Implement mini-batch SGD\n",
    "\n",
    "Hints:\n",
    "1. In every epoch, randomly permute the $n$ samples (just like SGD).\n",
    "2. Each epoch has $\\frac{n}{b}$ iterations. In every iteration, use $b$ samples, and compute the gradient and objective using the ``mb_stochastic_objective_gradient`` function. In the next iteration, use the next $b$ samples, and so on.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mini-Batch SGD for solving logistic regression\n",
    "# Inputs:\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "#     b: integer, the batch size\n",
    "#     stepsize: scalar\n",
    "#     max_epoch: integer, the maximal epochs\n",
    "#     w: d-by-1 matrix, initialization of w\n",
    "# Return:\n",
    "#     w: the solution\n",
    "#     objvals: record of each iteration's objective value\n",
    "   # Fill the function\n",
    "    # Follow the implementation of sgd\n",
    "    # Record one objective value per epoch (not per iteration!)\n",
    "def mb_sgd(x, y, lam, b, stepsize, max_epoch=100, w=None):    \n",
    "    n, d = x.shape\n",
    "    num_batches = n//b\n",
    "    objvals = numpy.zeros(max_epoch) # store the objective values\n",
    "    if w is None:\n",
    "        w = numpy.zeros((d, 1)) # zero initialization\n",
    "    \n",
    "    for t in range(max_epoch):\n",
    "        # randomly shuffle the samples\n",
    "        rand_indices = numpy.random.permutation(n)\n",
    "        x_rand = x[rand_indices, :]\n",
    "        y_rand = y[rand_indices, :]\n",
    "        \n",
    "        objval = 0 # accumulate the objective values\n",
    "        for i in range(0, n, b):\n",
    "            xi_batch = x_rand[i: i + b, :] # 1-by-d matrix\n",
    "            yi_batch = y_rand[i : i + b]\n",
    "            obj, g = mb_stochastic_objective_gradient(w, xi_batch, yi_batch, lam, b)\n",
    "            objval += obj\n",
    "            w -= stepsize * g\n",
    "\n",
    "        stepsize = 0.9\n",
    "        objval /= n // b\n",
    "        objvals[t] = objval\n",
    "        \n",
    "        print('Objective value at epoch t=' + str(t) + ' is ' + str(objval))\n",
    "    \n",
    "    return w, objvals\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6.3. Run MB-SGD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Objective value at epoch t=0 is 0.6584307058409451\n",
      "Objective value at epoch t=1 is 1.090952256574618\n",
      "Objective value at epoch t=2 is 1.2440456346306357\n",
      "Objective value at epoch t=3 is 1.1581857759936078\n",
      "Objective value at epoch t=4 is 1.0972731806604012\n",
      "Objective value at epoch t=5 is 1.259420276600149\n",
      "Objective value at epoch t=6 is 1.0411237013207715\n",
      "Objective value at epoch t=7 is 1.1204709119370886\n",
      "Objective value at epoch t=8 is 1.132675032457216\n",
      "Objective value at epoch t=9 is 1.3657844856161372\n",
      "Objective value at epoch t=10 is 1.2912972019229818\n",
      "Objective value at epoch t=11 is 1.1909201207262614\n",
      "Objective value at epoch t=12 is 1.142506610387306\n",
      "Objective value at epoch t=13 is 1.165117811657238\n",
      "Objective value at epoch t=14 is 1.2861054915634271\n",
      "Objective value at epoch t=15 is 1.235238493277754\n",
      "Objective value at epoch t=16 is 1.1203213299801762\n",
      "Objective value at epoch t=17 is 1.0779563973092907\n",
      "Objective value at epoch t=18 is 1.201737651624787\n",
      "Objective value at epoch t=19 is 1.4054548522558643\n",
      "Objective value at epoch t=20 is 1.133118784317557\n",
      "Objective value at epoch t=21 is 1.5205965313002494\n",
      "Objective value at epoch t=22 is 1.0933794649126898\n",
      "Objective value at epoch t=23 is 1.2058634658557648\n",
      "Objective value at epoch t=24 is 1.2822509170378833\n",
      "Objective value at epoch t=25 is 1.1864871601162783\n",
      "Objective value at epoch t=26 is 1.1314739217607064\n",
      "Objective value at epoch t=27 is 1.33309577865478\n",
      "Objective value at epoch t=28 is 1.1595308429680573\n",
      "Objective value at epoch t=29 is 1.2741905421863584\n",
      "Objective value at epoch t=30 is 1.3537388556670291\n",
      "Objective value at epoch t=31 is 1.21886044480027\n",
      "Objective value at epoch t=32 is 1.2573344487672409\n",
      "Objective value at epoch t=33 is 1.249509700929508\n",
      "Objective value at epoch t=34 is 1.100879630055268\n",
      "Objective value at epoch t=35 is 1.283531699294739\n",
      "Objective value at epoch t=36 is 1.21398401706176\n",
      "Objective value at epoch t=37 is 1.1655022844003358\n",
      "Objective value at epoch t=38 is 1.3206105575146128\n",
      "Objective value at epoch t=39 is 1.2419657370417476\n",
      "Objective value at epoch t=40 is 1.514364451936212\n",
      "Objective value at epoch t=41 is 1.083574949203885\n",
      "Objective value at epoch t=42 is 1.3414515640802747\n",
      "Objective value at epoch t=43 is 1.2833803473542895\n",
      "Objective value at epoch t=44 is 1.3259445859985202\n",
      "Objective value at epoch t=45 is 1.2771731716867245\n",
      "Objective value at epoch t=46 is 1.3508257227669698\n",
      "Objective value at epoch t=47 is 1.0913967449708168\n",
      "Objective value at epoch t=48 is 1.3088862933608936\n",
      "Objective value at epoch t=49 is 1.1709779267750506\n",
      "Objective value at epoch t=50 is 1.4875881823784411\n",
      "Objective value at epoch t=51 is 1.1174281226975273\n",
      "Objective value at epoch t=52 is 1.175107751005247\n",
      "Objective value at epoch t=53 is 1.107281531897971\n",
      "Objective value at epoch t=54 is 1.2238988616008823\n",
      "Objective value at epoch t=55 is 1.2688450429946596\n",
      "Objective value at epoch t=56 is 1.2990076258230543\n",
      "Objective value at epoch t=57 is 1.1698116256008364\n",
      "Objective value at epoch t=58 is 1.2385494460317859\n",
      "Objective value at epoch t=59 is 1.11038724581358\n",
      "Objective value at epoch t=60 is 1.2029365320171252\n",
      "Objective value at epoch t=61 is 1.1394375884349397\n",
      "Objective value at epoch t=62 is 1.150294821735012\n",
      "Objective value at epoch t=63 is 1.0308563991028568\n",
      "Objective value at epoch t=64 is 1.242850995565612\n",
      "Objective value at epoch t=65 is 1.2811006393947337\n",
      "Objective value at epoch t=66 is 1.0789068247883893\n",
      "Objective value at epoch t=67 is 1.087906436993905\n",
      "Objective value at epoch t=68 is 1.0725863332708279\n",
      "Objective value at epoch t=69 is 1.1427047603855722\n",
      "Objective value at epoch t=70 is 1.2745891900702704\n",
      "Objective value at epoch t=71 is 1.2888964608165956\n",
      "Objective value at epoch t=72 is 1.1374790616260524\n",
      "Objective value at epoch t=73 is 1.1979019871974201\n",
      "Objective value at epoch t=74 is 1.3854037214714672\n",
      "Objective value at epoch t=75 is 1.2782861985563483\n",
      "Objective value at epoch t=76 is 1.3657414683779519\n",
      "Objective value at epoch t=77 is 1.1861202458950406\n",
      "Objective value at epoch t=78 is 1.3250719696335205\n",
      "Objective value at epoch t=79 is 1.365702167261872\n",
      "Objective value at epoch t=80 is 1.5841142081053063\n",
      "Objective value at epoch t=81 is 1.1717918002580159\n",
      "Objective value at epoch t=82 is 1.1240700354444968\n",
      "Objective value at epoch t=83 is 1.3682324934461563\n",
      "Objective value at epoch t=84 is 1.294817775355608\n",
      "Objective value at epoch t=85 is 1.3406025627006104\n",
      "Objective value at epoch t=86 is 1.3313501371487493\n",
      "Objective value at epoch t=87 is 1.0949618151641691\n",
      "Objective value at epoch t=88 is 1.2135080252354453\n",
      "Objective value at epoch t=89 is 1.387007842977057\n",
      "Objective value at epoch t=90 is 1.2576503333194988\n",
      "Objective value at epoch t=91 is 1.163501603629693\n",
      "Objective value at epoch t=92 is 1.2931839746830445\n",
      "Objective value at epoch t=93 is 1.331223118173049\n",
      "Objective value at epoch t=94 is 1.431453944209681\n",
      "Objective value at epoch t=95 is 1.1775350585307476\n",
      "Objective value at epoch t=96 is 1.03218902786389\n",
      "Objective value at epoch t=97 is 1.2516045335496746\n",
      "Objective value at epoch t=98 is 1.2428901355946442\n",
      "Objective value at epoch t=99 is 1.2338319728434932\n"
     ]
    }
   ],
   "source": [
    "# MB-SGD with batch size b=8\n",
    "lam = 1E-6 # do not change\n",
    "b = 8 # do not change\n",
    "stepsize = 0.01 # you must tune this parameter\n",
    "max_epoch=100\n",
    "\n",
    "w, objvals_mbsgd8 = mb_sgd(x_train, y_train, lam, b, stepsize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Objective value at epoch t=0 is 0.6806175100535313\n",
      "Objective value at epoch t=1 is 0.7125123434876732\n",
      "Objective value at epoch t=2 is 0.9984083024074477\n",
      "Objective value at epoch t=3 is 0.8419255204014645\n",
      "Objective value at epoch t=4 is 0.7841193754472466\n",
      "Objective value at epoch t=5 is 0.7350149424597594\n",
      "Objective value at epoch t=6 is 0.9252559028713142\n",
      "Objective value at epoch t=7 is 0.8522437758989202\n",
      "Objective value at epoch t=8 is 0.9146133840473819\n",
      "Objective value at epoch t=9 is 0.9570860667918326\n",
      "Objective value at epoch t=10 is 0.8304435959294999\n",
      "Objective value at epoch t=11 is 0.9391842274611021\n",
      "Objective value at epoch t=12 is 0.8065326170238631\n",
      "Objective value at epoch t=13 is 0.7307184912165896\n",
      "Objective value at epoch t=14 is 0.9915859115611088\n",
      "Objective value at epoch t=15 is 0.7565643528689053\n",
      "Objective value at epoch t=16 is 0.8246782802562377\n",
      "Objective value at epoch t=17 is 0.7918690848454506\n",
      "Objective value at epoch t=18 is 0.8090587334351598\n",
      "Objective value at epoch t=19 is 0.7474687646251439\n",
      "Objective value at epoch t=20 is 0.9544890295459794\n",
      "Objective value at epoch t=21 is 0.7324624695120596\n",
      "Objective value at epoch t=22 is 0.8415125692953748\n",
      "Objective value at epoch t=23 is 0.85511099143172\n",
      "Objective value at epoch t=24 is 0.8602087325705023\n",
      "Objective value at epoch t=25 is 0.8839450265511191\n",
      "Objective value at epoch t=26 is 0.8805583008364654\n",
      "Objective value at epoch t=27 is 0.8491634284606805\n",
      "Objective value at epoch t=28 is 0.8652992281667158\n",
      "Objective value at epoch t=29 is 0.7292033374439496\n",
      "Objective value at epoch t=30 is 1.0279913462809114\n",
      "Objective value at epoch t=31 is 0.7526842249813358\n",
      "Objective value at epoch t=32 is 0.7299125531483334\n",
      "Objective value at epoch t=33 is 0.8673163172489267\n",
      "Objective value at epoch t=34 is 0.8745283198760856\n",
      "Objective value at epoch t=35 is 0.902083371779424\n",
      "Objective value at epoch t=36 is 0.883254782196863\n",
      "Objective value at epoch t=37 is 0.8230363756622856\n",
      "Objective value at epoch t=38 is 0.8120009048707859\n",
      "Objective value at epoch t=39 is 0.8191158287311099\n",
      "Objective value at epoch t=40 is 0.8512944822690226\n",
      "Objective value at epoch t=41 is 0.766997855309856\n",
      "Objective value at epoch t=42 is 0.7465779554628532\n",
      "Objective value at epoch t=43 is 0.952833388152324\n",
      "Objective value at epoch t=44 is 1.0107854530425475\n",
      "Objective value at epoch t=45 is 0.7969901633325073\n",
      "Objective value at epoch t=46 is 0.9593617288881955\n",
      "Objective value at epoch t=47 is 0.9425667901040171\n",
      "Objective value at epoch t=48 is 0.8355072077436763\n",
      "Objective value at epoch t=49 is 0.7642301664714937\n",
      "Objective value at epoch t=50 is 1.011134820940118\n",
      "Objective value at epoch t=51 is 0.9277660387557912\n",
      "Objective value at epoch t=52 is 1.0185396530751343\n",
      "Objective value at epoch t=53 is 0.7700913967888812\n",
      "Objective value at epoch t=54 is 0.9359713877412439\n",
      "Objective value at epoch t=55 is 0.7775858017362998\n",
      "Objective value at epoch t=56 is 0.8471814463481422\n",
      "Objective value at epoch t=57 is 0.9551462458161692\n",
      "Objective value at epoch t=58 is 0.8934329082566077\n",
      "Objective value at epoch t=59 is 0.9444499515341722\n",
      "Objective value at epoch t=60 is 0.7785913153077841\n",
      "Objective value at epoch t=61 is 0.8131796474561176\n",
      "Objective value at epoch t=62 is 0.8020964139027104\n",
      "Objective value at epoch t=63 is 0.9018691554060776\n",
      "Objective value at epoch t=64 is 0.9050195902773737\n",
      "Objective value at epoch t=65 is 0.9276138350945675\n",
      "Objective value at epoch t=66 is 0.85063465622775\n",
      "Objective value at epoch t=67 is 0.8978036696839716\n",
      "Objective value at epoch t=68 is 0.8562218773358199\n",
      "Objective value at epoch t=69 is 0.8540683490414708\n",
      "Objective value at epoch t=70 is 0.7699545989192778\n",
      "Objective value at epoch t=71 is 0.7331747326601024\n",
      "Objective value at epoch t=72 is 1.0139829581842212\n",
      "Objective value at epoch t=73 is 0.9745805258910867\n",
      "Objective value at epoch t=74 is 0.6744520001813139\n",
      "Objective value at epoch t=75 is 0.7734240244210211\n",
      "Objective value at epoch t=76 is 0.8470034454976124\n",
      "Objective value at epoch t=77 is 0.8110378339046056\n",
      "Objective value at epoch t=78 is 0.867975579174785\n",
      "Objective value at epoch t=79 is 0.8376183003659042\n",
      "Objective value at epoch t=80 is 0.928876408259098\n",
      "Objective value at epoch t=81 is 0.9227751795746609\n",
      "Objective value at epoch t=82 is 0.8970247240971538\n",
      "Objective value at epoch t=83 is 0.9437182729143302\n",
      "Objective value at epoch t=84 is 0.8339353758578589\n",
      "Objective value at epoch t=85 is 0.7889102843810218\n",
      "Objective value at epoch t=86 is 0.8922745433779701\n",
      "Objective value at epoch t=87 is 0.9539039403713406\n",
      "Objective value at epoch t=88 is 0.9767557559798392\n",
      "Objective value at epoch t=89 is 0.8889469035718525\n",
      "Objective value at epoch t=90 is 0.9611124334735541\n",
      "Objective value at epoch t=91 is 0.9622110380569644\n",
      "Objective value at epoch t=92 is 0.7184490211986525\n",
      "Objective value at epoch t=93 is 0.7262531970735474\n",
      "Objective value at epoch t=94 is 0.865066802686872\n",
      "Objective value at epoch t=95 is 0.8842669973114553\n",
      "Objective value at epoch t=96 is 0.8734619847989349\n",
      "Objective value at epoch t=97 is 0.8069904345012746\n",
      "Objective value at epoch t=98 is 0.9242887368365629\n",
      "Objective value at epoch t=99 is 0.7343236712722057\n"
     ]
    }
   ],
   "source": [
    "# MB-SGD with batch size b=64\n",
    "lam = 1E-6 # do not change\n",
    "b = 64 # do not change\n",
    "stepsize = 0.01 # you must tune this parameter\n",
    "max_epoch=100\n",
    "\n",
    "w, objvals_mbsgd64 = mb_sgd(x_train, y_train, lam, b, stepsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7. Plot and compare GD, SGD, and MB-SGD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You are required to compare the following algorithms:\n",
    "\n",
    "- Gradient descent (GD)\n",
    "\n",
    "- SGD\n",
    "\n",
    "- MB-SGD with b=8\n",
    "\n",
    "- MB-SGD with b=64\n",
    "\n",
    "Follow the code in Section 4 to plot ```objective function value``` against ```epochs```. There should be four curves in the plot; each curve corresponds to one algorithm."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hint: Logistic regression with $\\ell_2$-norm regularization is a strongly convex optimization problem. All the algorithms will converge to the same solution. **In the end, the ``objective function value`` of the 4 algorithms will be the same. If not the same, your implementation must be wrong. Do NOT submit wrong code and wrong result!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the 4 curves:\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "fig = plt.figure(figsize=(6, 4))\n",
    "\n",
    "epochs_gd = range(len(objvals_gd))\n",
    "epochs_sgd = range(len(objvals_sgd))\n",
    "epochs_mg_sgd8 = range(len(objvals_mbsgd8))\n",
    "epochs_mg_sgd64 = range(len(objvals_mbsgd64))\n",
    "\n",
    "line0, = plt.plot(epochs_gd, objvals_gd, '--b')\n",
    "line1, = plt.plot(epochs_sgd, objvals_sgd, '-r')\n",
    "line2, = plt.plot(epochs_mg_sgd8, objvals_mbsgd8, '-y')\n",
    "line3, = plt.plot(epochs_mg_sgd64, objvals_mbsgd64, '-g')\n",
    "\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Objective Value')\n",
    "plt.xticks()\n",
    "plt.yticks()\n",
    "plt.legend([line0, line1, line2, line3], ['GD', 'SGD', 'MB_SGD8', 'MB_SGD64'])\n",
    "plt.show()\n",
    "fig.savefig('compare_gd_sgd_mb.pdf', format='pdf', dpi=1200)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python3new",
   "language": "python",
   "name": "python3new"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
